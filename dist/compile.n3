@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix this: <http://eye-shacl#> .
@prefix ex: <http://example.org/> .

{ ?value this:nodeKind sh:BlankNode } <= { ?value log:rawType log:LabeledBlankNode }. 
{ ?value this:nodeKind sh:BlankNode } <= { ?value log:rawType log:UnlabeledBlankNode }.
{ ?value this:nodeKind sh:BlankNode } <= { ?value log:rawType log:SkolemIRI }.


{
    { ?s ?p ?o } this:cbd ?s 
}
<=
{
    ?s ?p ?o .
    ?p log:notEqualTo this:cbd  .
} .

{
    ?triple this:cbd ?x
}
<=
{
    ?x [] ?y .
    ?y this:nodeKind sh:BlankNode .
    ?triple this:cbd ?y .    
} .

{
    ?triple this:cbd ?x
}
<=
{
    ?x list:member ?s .
    ?s this:nodeKind sh:BlankNode .
    ?triple this:cbd ?s .    
} .

{
    ?triple this:cbd ?x
}
<=
{
    ?x [] [ list:member ?s ] .
    ?s this:nodeKind sh:BlankNode .
    ?triple this:cbd ?s .    
} .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

# https://www.w3.org/TR/shacl/#core-components-value-type
sh:class this:constraint sh:ClassConstraintComponent .
sh:nodeKind this:constraint sh:NodeKindConstraintComponent.
sh:datatype this:constraint sh:DatatypeConstraintComponent .
# https://www.w3.org/TR/shacl/#core-components-count
sh:minCount this:constraint sh:MinCountConstraintComponent .
sh:maxCount this:constraint sh:MaxCountConstraintComponent .
# https://www.w3.org/TR/shacl/#core-components-range
sh:minExclusive this:constraint sh:MinExclusiveConstraintComponent .
sh:minInclusive this:constraint sh:MinInclusiveConstraintComponent .
sh:maxExclusive this:constraint sh:MaxExclusiveConstraintComponent .
sh:maxInclusive this:constraint sh:MaxInclusiveConstraintComponent .
# https://www.w3.org/TR/shacl/#core-components-string
sh:minLength this:constraint sh:MinLengthConstraintComponent .
sh:maxLength this:constraint sh:MaxLengthConstraintComponent .
sh:pattern this:constraint sh:PatternConstraintComponent .
sh:languageIn this:constraint sh:LanguageInConstraintComponent .
sh:uniqueLang this:constraint sh:UniqueLangConstraintComponent .
# https://www.w3.org/TR/shacl/#core-components-property-pairs
sh:equals this:constraint sh:EqualsConstraintComponent .
sh:disjoint this:constraint sh:DisjointConstraintComponent .
sh:lessThan this:constraint sh:LessThanConstraintComponent .
sh:lessThanOrEquals this:constraint sh:LessThanOrEqualsConstraintComponent .
# https://www.w3.org/TR/shacl/#core-components-logical
sh:not this:constraint sh:NotConstraintComponent .
sh:and this:constraint sh:AndConstraintComponent .
sh:or this:constraint sh:OrConstraintComponent .
sh:xone this:constraint sh:XoneConstraintComponent .
# https://www.w3.org/TR/shacl/#core-components-shape
sh:node this:constraint sh:NodeConstraintComponent .
sh:property this:constraint sh:PropertyConstraintComponent .
sh:qualifiedValueShape this:constraint sh:QualifiedValueShapeConstraintComponent .
sh:qualifiedMinCount this:constraint sh:QualifiedMinCountConstraintComponent .
sh:qualifiedMaxCount this:constraint sh:QualifiedMaxCountConstraintComponent .
# https://www.w3.org/TR/shacl/#core-components-others
sh:closed this:constraint sh:ClosedConstraintComponent .
sh:ignoredProperties this:constraint sh:ClosedConstraintComponent .
sh:hasValue this:constraint sh:HasValueConstraintComponent .
sh:in this:constraint sh:InConstraintComponent .

# https://www.w3.org/TR/shacl/#core-components-count

@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

# MinCountConstraintComponent
{
    ?shape a this:PropertyShape ; sh:minCount ?minCount ; sh:path ?path .
}
=>
{
    {
        ?shape this:focusNode ?node .
        (?node ?path) this:values ?values .
        ?values list:length ?length .
        ?length math:lessThan ?minCount .
        this: this:report ?report .
        ("at least %s values expected, but found %s" ?minCount ?length) string:format ?message .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:MinCountConstraintComponent;
            sh:sourceShape ?shape ;
            sh:focusNode ?node ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
} .

{
    ?shape a this:PropertyShape ; sh:minCount ?minCount ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:values ?values .
        ?values list:length [ math:lessThan ?minCount ].
    } .
} .



# MaxCountConstraintComponent
{
    ?shape a this:PropertyShape ; sh:maxCount ?maxCount ; sh:path ?path .
}
=>
{
    {
        ?shape this:focusNode ?node .
        (?node ?path) this:values ?values .
        ?values list:length ?length .
        ?length math:greaterThan ?maxCount .
        this: this:report ?report .
        ("at most %s values expected, but found %s" ?maxCount ?length) string:format ?message .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:MaxCountConstraintComponent;
            sh:sourceShape ?shape ;
            sh:focusNode ?node ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
} .

{
    ?shape a this:PropertyShape ; sh:maxCount ?maxCount ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .        
    }
    <=
    {
       (?node ?path) this:values ?values .
        ?values list:length [ math:greaterThan ?maxCount ].
    } .
} .

# https://www.w3.org/TR/shacl/#core-components-others

@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.

{ ?value this:nodeKind sh:IRI } <= { ?value log:rawType log:Other . ?value log:uri [] }. 

# ClosedConstraintComponent
{
    ?shape a this:Shape ; sh:closed true .
    (?x { ?shape sh:property [ sh:path ?x ] . ?x this:nodeKind sh:IRI } ?existing) log:collectAllIn [] .
    (?x { ?shape sh:ignoredProperties [ list:member ?x ]} ?ignored) log:collectAllIn [] .
    (?existing ?ignored) list:append ?allowed .
    ?allowed log:localN3String ?allowedString .
    ("allowed properties are only: %s" ?allowedString) string:format ?message .
}
=>
{
    {
        ?shape this:focusNode ?node .
        ?node ?property ?value .
        ?allowed list:notMember ?property .
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:ClosedConstraintComponent;
            sh:sourceShape ?shape ;
            sh:focusNode ?node ;
            sh:value ?value ;
            sh:resultPath ?property ;
            this:message ?message ;
        ] .
    } .
} .

{
    ?shape a this:Shape ; sh:closed true .
    (?x { ?shape sh:property [ sh:path ?x ] . ?x this:nodeKind sh:IRI } ?existing) log:collectAllIn [] .
    (?x { ?shape sh:ignoredProperties [ list:member ?x ]} ?ignored) log:collectAllIn [] .
    (?existing ?ignored) list:append ?allowed .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        ?node ?property ?value .
        ?allowed list:notMember ?property .
    } .
} .


# HasValueConstraintComponent
{
    ?shape a this:PropertyShape ; sh:hasValue ?hasValue ; sh:path ?path .
    ("missing expected value: %s" ?hasValue) string:format ?message .
} 
=>
{
    {
        ?shape this:focusNode ?focusNode .
        (?focusNode ?path) this:values ?values .
        ?values list:notMember ?hasValue .
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:HasValueConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
}.

{
   ?shape a this:PropertyShape ; sh:hasValue ?hasValue ; sh:path ?path .
} 
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:values ?values .
        ?values list:notMember ?hasValue .
    } .
}.

{
    ?shape a this:NodeShape ; sh:hasValue ?hasValue .
    ("missing expected value: %s" ?hasValue) string:format ?message .
} 
=>
{
    {
        ?shape this:focusNode ?focusNode .
        ?focusNode log:notEqualTo ?hasValue .
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:HasValueConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            this:message ?message ;
        ] .
    } .
}.

{
    ?shape a this:NodeShape ; sh:hasValue ?hasValue .
    [] log:notIncludes { ?shape sh:deactivated true } .
} 
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
       ?node log:notEqualTo ?hasValue .
    } .
}.

# InConstraintComponent
{
    ?shape a this:PropertyShape ; sh:in ?in ; sh:path ?path .
} 
=>
{
    {
        ?shape this:focusNode ?focusNode .

        (?focusNode ?path) this:values ?values .
        (?values ?in) func:except ?except . # checking all values at once improves performance
        ?except list:member ?value .
        
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:InConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?value ;
            sh:resultPath ?path ;
            this:message "value is not in the list of allowed values" ;
        ] .
    } .
}.

{
   ?shape a this:PropertyShape ; sh:in ?in ; sh:path ?path .
} 
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:value ?value .
        ?in list:notMember ?value .
    } .
}.

{
    ?shape a this:NodeShape ; sh:in ?in .
} 
=>
{
    {
        ?shape this:focusNode ?focusNode .
        ?in list:notMember ?focusNode .
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:InConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?focusNode ;
            this:message "value is not in the list of allowed values" ;
        ] .
    } .
}.

{
   ?shape a this:NodeShape ; sh:in ?in .
} 
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        ?in list:notMember ?node .
    } .
}.# https://www.w3.org/TR/shacl/#core-components-property-pairs

@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

# EqualsConstraintComponent
{ 
    ?shape a this:PropertyShape ; sh:equals ?otherPredicate ; sh:path ?path .
    ?otherPredicate log:localN3String ?otherPredicateString .
    ("Must have same values as %s" ?otherPredicateString) string:format ?message .
} 
=> 
{
    {
        ?shape this:focusNode ?focusNode .
        (?focusNode ?path) this:values ?thisValues .
        (?focusNode ?otherPredicate) this:values ?otherValues .

        (?thisValues ?otherValues) list:append ?union .
        (?x { ?x list:in ?thisValues , ?otherValues } ?intersection) log:collectAllIn [] .
        
        ?union list:member ?value .
        ?intersection list:notMember ?value .

        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:EqualsConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:resultPath ?path ;
            sh:value ?value ;
            this:message ?message ;
        ]
    } .

}.



{ 
    ?shape a this:NodeShape ; sh:equals ?otherPredicate .
    ?otherPredicate log:localN3String ?otherPredicateString .
    ("Must be value of %s" ?otherPredicateString) string:format ?message .
} 
=> 
{
    {
        ?shape  this:focusNode ?focusNode .
        (?focusNode ?otherPredicate) this:values ?otherValues .
        
        ((?focusNode) ?otherValues) list:append ?union .
        (?x { ?x log:equalTo ?focusNode ; list:in ?otherValues } ?intersection) log:collectAllIn [] .
        
        ?union list:member ?value .
        ?intersection list:notMember ?value .

        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:EqualsConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?value ;
            this:message ?message ;
        ]
    } .
}.

{
    ?shape a this:PropertyShape ; sh:equals ?otherPredicate ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:values ?thisValues .
        (?node ?otherPredicate) this:values ?otherValues .
        ?thisValues list:setNotEqualTo ?otherValues .
    } .
} .

{
    ?shape a this:NodeShape ; sh:equals ?otherPredicate .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?otherPredicate) this:values ?otherValues .
        ?otherValues list:notMember ?node .
    } .
} .

# DisjointConstraintComponent
{ 
    ?shape a this:PropertyShape ; sh:disjoint ?otherPredicate ; sh:path ?path .
    ?otherPredicate log:localN3String ?otherPredicateString .
    ("Must have different values than %s" ?otherPredicateString) string:format ?message .
} 
=> 
{
    {
        ?shape this:focusNode ?focusNode .
          
        (?focusNode ?path) this:value ?value .
        (?focusNode ?otherPredicate) this:value ?value .
         
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:DisjointConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?value ;
            sh:resultPath ?path ;
            this:message ?message ;
        ]
    } .
}.

{ 
    ?shape a this:NodeShape ; sh:disjoint ?otherPredicate .
    ?otherPredicate log:localN3String ?otherPredicateString .
    ("Must not be a value of %s" ?otherPredicateString) string:format ?message .
} 
=> 
{
    {
        ?shape this:focusNode ?focusNode .
          
        (?focusNode ?otherPredicate) this:value ?focusNode .
         
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:DisjointConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?focusNode ;
            this:message ?message ;
        ]
    } .
}.

{
    ?shape a this:PropertyShape ; sh:disjoint ?otherPredicate ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:value ?value .
        (?node ?otherPredicate) this:value ?value .
    } .
} .

{
    ?shape a this:NodeShape ; sh:disjoint ?otherPredicate .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?otherPredicate) this:value ?node .   
    } .
} .

# LessThanConstraintComponent
{ 
    ?shape a this:PropertyShape ; sh:lessThan ?otherPredicate ; sh:path ?path .
    ?otherPredicate log:localN3String ?otherPredicateString .
    ("Value is not less than value of %s" ?otherPredicateString) string:format ?message .
} 
=> 
{
    {
        ?shape this:focusNode ?focusNode .
          
        (?focusNode ?path) this:value ?value .
        (?focusNode ?otherPredicate) this:value ?otherValue .
        [] log:notIncludes { ?value this:maxExclusive ?otherValue } .
         
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:LessThanConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?value ;
            sh:resultPath ?path ;
            this:message ?message ;
        ]
    } .
}.


{
    ?shape a this:PropertyShape ; sh:lessThan ?otherPredicate ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:value ?value .
        (?node ?otherPredicate) this:value ?otherValue .
        [] log:notIncludes { ?value this:maxExclusive ?otherValue } .
    } .
} .


# LessThanOrEqualsConstraintComponent
{ 
    ?shape a this:PropertyShape ; sh:lessThanOrEquals ?otherPredicate ; sh:path ?path .
     ?otherPredicate log:localN3String ?otherPredicateString .
    ("Value is not less than or equal to value of %s" ?otherPredicateString) string:format ?message .
} 
=> 
{
    {
        ?shape this:focusNode ?focusNode .
          
        (?focusNode ?path) this:value ?value .
        (?focusNode ?otherPredicate) this:value ?otherValue .
        [] log:notIncludes { ?value this:maxInclusive ?otherValue } .
         
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:LessThanOrEqualsConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?value ;
            sh:resultPath ?path ;
            this:message ?message ;
        ]
    } .
}.

{
    ?shape a this:PropertyShape ; sh:lessThanOrEquals ?otherPredicate ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:value ?value .
        (?node ?otherPredicate) this:value ?otherValue .
        [] log:notIncludes { ?value this:maxInclusive ?otherValue } .
    } .
} .

# https://www.w3.org/TR/shacl/#core-components-shape

@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .


# PropertyShapeComponent

# node -> property
{
    ?shape sh:property ?propertyShape ; a this:NodeShape .
}
=> 
{
    { ?propertyShape this:focusNode ?node } <= { ?shape this:focusNode ?node }
} .

{
    ?shape sh:property ?propertyShape ; a this:NodeShape .
}
=> 
{
    { ?node this:violates ?shape } <= { ?node this:violates ?propertyShape }
} .

# property -> property
{
    ?shape a this:PropertyShape ; sh:property ?propertyShape ; sh:path ?path .
}
=> 
{
    {
        ?propertyShape this:focusNode ?value 
    }
    <= 
    {
        ?shape this:focusNode ?node .
        (?node ?path) this:value ?value 
    }
} .

{
    ?shape a this:PropertyShape ; sh:property ?propertyShape ; sh:path ?path .
}
=> 
{
    { 
        ?node this:violates ?shape 
    } 
    <=
    { 
        (?node ?path) this:value ?value .
        ?value this:violates ?propertyShape 
    }
} .

# qualifiedValueShape
 

{
    ?shape sh:qualifiedMinCount ?minCount .
    ?shape sh:qualifiedValueShape ?valueShape ; sh:path ?path .
}
=>
{
    {
        ?shape this:focusNode ?node .
        ?node this:qualifiedCount (?shape ?length) .
        ?length math:lessThan ?minCount .

        ("%s values passed, expected at least %s" ?length ?minCount) string:format ?message .
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:QualifiedMinCountConstraintComponent;
            sh:sourceShape ?shape ;
            sh:focusNode ?node ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
} .

{
    ?shape sh:qualifiedMaxCount ?maxCount .
    ?shape sh:qualifiedValueShape ?valueShape ; sh:path ?path .
}
=>
{
    {
        ?shape this:focusNode ?node .
        ?node this:qualifiedCount (?shape ?length) .
        ?length math:greaterThan ?maxCount .

        ("%s values passed, expected at most %s" ?length ?maxCount) string:format ?message .
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:QualifiedMaxCountConstraintComponent;
            sh:sourceShape ?shape ;
            sh:focusNode ?node ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
} .


{
    ?shape a this:PropertyShape ; sh:qualifiedValueShape ?valueShape ; sh:path ?path .
    (
        ?x {
            ?shape sh:qualifiedValueShapesDisjoint true .
            ?parent sh:property ?shape, ?other .
            ?shape log:notEqualTo ?other .
            ?other sh:qualifiedValueShape ?x
        } ?siblings
    ) log:collectAllIn [] .
}
=>
{
    {
       ?node this:qualifiedCount (?shape ?length)
    }
    <=
    {
        (?node ?path) this:values ?values .
        (?x { 
            ?x list:in ?values . 
            [] log:notIncludes { ?x this:violates ?valueShape } .
            (
                { ?sibling list:in ?siblings }
                { ?x this:violates ?sibling }
            ) log:forAllIn [] .
        } ?xs) log:collectAllIn [] .
                
        ?xs list:length ?length .
    } .
} .


{
    ?shape sh:qualifiedMinCount ?minCount .
    ?shape sh:qualifiedValueShape ?valueShape ; sh:path ?path .
}
=>
{
    {
       ?node this:violates ?shape
    }
    <=
    {
        ?node this:qualifiedCount (?shape ?length) .
        ?length math:lessThan ?minCount .
    } .
} .

{
    ?shape sh:qualifiedMaxCount ?maxCount .
    ?shape sh:qualifiedValueShape ?valueShape ; sh:path ?path .
}
=>
{
    {
       ?node this:violates ?shape
    }
    <=
    {
        ?node this:qualifiedCount (?shape ?length) .
        ?length math:greaterThan ?maxCount .
    } .
} .# https://www.w3.org/TR/shacl/#core-components-string
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix this: <http://eye-shacl#> .


# UniqueLangConstraintComponent
{ 
    ?shape a this:PropertyShape ; sh:uniqueLang true; sh:path ?path .
} 
=> 
{
    {
        ?shape this:focusNode ?focusNode .
        (?focusNode ?path) this:hasDuplicateLanguage ?lang .
        ("Language \"%s\" has been used more than once" ?lang) string:format ?message .
        this: this:report ?report .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:UniqueLangConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
}.

{ 
    ?shape a this:PropertyShape ; sh:uniqueLang true; sh:path ?path .
} 
=> 
{
    { ?node this:violates ?shape } <= { (?node ?path) this:hasDuplicateLanguage [] }
}.


@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

# path

{
    ?path sh:inversePath ?inversePath .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        (?value ?inversePath) this:value ?node .
    } .
} .

{
    ?path sh:alternativePath ?alternatives .
    ?alternatives list:member ?alt .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        (?node ?alt) this:value ?value .
    } .
} .

{
    ?path sh:zeroOrMorePath ?zeroOrMorePath .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        ?node log:equalTo ?value .
    } .
} .

{
    ?path sh:zeroOrMorePath ?zeroOrMorePath .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        (?node ?zeroOrMorePath) this:value ?v .
        (?v ?path) this:value ?value .
    } .
} .

{
    ?path sh:oneOrMorePath ?oneOrMorePath .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        (?node ?oneOrMorePath) this:value ?value .
    } .
} .

{
    ?path sh:oneOrMorePath ?oneOrMorePath .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        (?node ?oneOrMorePath) this:value ?v .
        (?v ?path) this:value ?value .
    } .
} .

{
    ?path sh:zeroOrOnePath ?zeroOrOnePath .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        ?node log:equalTo ?value .
    } .
} .

{
    ?path sh:zeroOrOnePath ?zeroOrOnePath .
}
=>
{
    {
        (?node ?path) this:value ?value .
    }
    <=
    {
        (?node ?zeroOrOnePath) this:value ?value .
    } .
} .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

{
    ?shape ?param [] .
    ?param this:constraint [] .
    [] log:notIncludes { ?shape sh:deactivated true } .
}
=>
{
    ?shape a this:Shape .
} .

{
    ?shape a this:Shape .
    [] log:notIncludes { ?shape sh:path [] } .
}
=>
{
    ?shape a this:NodeShape .
} .

{
    ?shape a this:Shape ; sh:path [] .
}
=>
{
    ?shape a this:PropertyShape .
} .

{
    ?shape a this:Shape .
    (?triple {?triple this:cbd ?shape } ?triples) log:collectAllIn [] .
    ?triples log:conjunction ?graph.
}
=>
{
    ?graph this:describeShape ?shape .
} .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

{
    ?shape a this:Shape ; sh:targetClass ?targetClass .
}
=>
{
    { ?shape this:focusNode ?x } <= { ?x this:class ?targetClass }
} .

{
    ?shape a this:Shape , rdfs:Class .
}
=>
{
    { ?shape this:focusNode ?x } <= { ?x this:class ?shape }
} .

{
    ?shape a this:Shape ; sh:targetNode ?targetNode .
}
=>
{
    { ?shape this:focusNode ?targetNode } <= { this: this:report [] }
} .



{
    ?shape a this:Shape ; sh:targetObjectsOf ?predicate .
}
=>
{
    { 
        ?shape this:focusNode ?x 
    } 
    <= 
    { 
        # trick to avoid triggering at build time
        this: this:report [] . 
        [] ?predicate ?x 
    }
} .


{
    ?shape a this:Shape ; sh:targetSubjectsOf ?predicate .
}
=>
{
    {
         ?shape this:focusNode ?x
    } 
    <= 
    { 
        # trick to avoid triggering at build time
        this: this:report [] .
        ?x ?predicate [] 
    }
} .

@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix this: <http://eye-shacl#> .

sh:node this:validator this:node ; this:messageFormat "value should satisfy shape %s".
sh:and this:validator this:and ; this:messageFormat "value should satisfy all of the following shapes: %s".
sh:or this:validator this:or ; this:messageFormat "value should satisfy at least one of the following shapes: %s".
sh:not this:validator this:not ; this:messageFormat "value should not satisfy the following shape: %s".
sh:xone this:validator this:xone ; this:messageFormat "value should satisfy exactly one of the following shapes: %s".
# sh:in this:validator list:in ; this:messageFormat "value should be one of: %s".
sh:class this:validator this:class ; this:messageFormat "value should be instance of %s".
sh:nodeKind this:validator this:nodeKind ; this:messageFormat "value should have node kind %s".
sh:datatype this:validator this:datatype ; this:messageFormat "value should have datatype %s".
sh:minExclusive this:validator this:minExclusive ; this:messageFormat "value should be greater than %s".
sh:minInclusive this:validator this:minInclusive ; this:messageFormat "value should be greater than or equal to %s".
sh:maxExclusive this:validator this:maxExclusive ; this:messageFormat "value should be less than %s".
sh:maxInclusive this:validator this:maxInclusive ; this:messageFormat "value should be less than or equal to %s".
sh:minLength this:validator this:minLength ; this:messageFormat "value should have at least %s characters".
sh:maxLength this:validator this:maxLength ; this:messageFormat "value should have at most %s characters".
sh:pattern this:validator this:pattern ; this:messageFormat "value should match pattern %s".
sh:languageIn this:validator this:languageIn ; this:messageFormat "value should have one of the language tags: %s".

# node shapes with validator
{
   ?param this:constraint ?constraint ; this:validator ?validator ; this:messageFormat ?messageFormat .
   ?shape a this:NodeShape ; ?param ?paramValue .
   ?paramValue log:localN3String ?paramValueString .
   (?messageFormat ?paramValueString) string:format ?message .
}
=> 
{
   {
       ?shape this:focusNode ?node .
       [] log:notIncludes { ?node ?validator ?paramValue } .
       this: this:report ?report .
   }
   => 
   {
       ?report sh:result [
           a sh:ValidationResult ;
           sh:sourceConstraintComponent ?constraint ;
           sh:sourceShape ?shape ;
           sh:focusNode ?node ;
           sh:value ?node ;
           this:message ?message ;
       ] .
   } .
} .

{
   ?param this:constraint ?constraint ; this:validator ?validator .
   ?shape a this:NodeShape ; ?param ?paramValue .
}
=> 
{
   {
       ?x this:violates ?shape 
   }
   <= 
   {
       [] log:notIncludes { ?x ?validator ?paramValue }
   }
} .

# property shapes with validator
{
   ?shape a this:PropertyShape ; sh:path ?path ; ?param ?paramValue .
   ?param this:constraint ?constraint ; this:validator ?validator ; this:messageFormat ?messageFormat .
   ?paramValue log:localN3String ?paramValueString .
   (?messageFormat ?paramValueString) string:format ?message .
}
=> 
{
   {
       ?shape this:focusNode ?node .
       ( ?node ?path ) this:value ?value .
       [] log:notIncludes { ?value ?validator ?paramValue } .
       this: this:report ?report .
   }
   => 
   {
       ?report sh:result [
           a sh:ValidationResult ;
           sh:sourceConstraintComponent ?constraint ;
           sh:sourceShape ?shape ;
           sh:focusNode ?node ;
           sh:resultPath ?path ;
           sh:value ?value ;
           this:message ?message ;
       ] .
   } .
} .

{
   ?shape a this:PropertyShape ; sh:path ?path ; ?param ?paramValue .
   ?param this:constraint ?constraint ; this:validator ?validator .
}
=> 
{
   {
       ?x this:violates ?shape .
   }
   <= 
   {
       ( ?x ?path ) this:value ?value .
       [] log:notIncludes { ?value ?validator ?paramValue } .
   } .
} .

{
   ?shape sh:message ?message .
}
=> 
{
   { ?result sh:sourceShape ?shape } => { ?result sh:resultMessage ?message }
} .

{
   ?shape a this:Shape .
   [] log:notIncludes { ?shape sh:message [] } .
}
=> 
{
   { ?result sh:sourceShape ?shape ; this:message ?message } => { ?result sh:resultMessage ?message }
} .
