@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

{
    (?focusNode ?path) this:values ?values
}
<=
{
    (?x { (?focusNode ?path) this:value ?x } ?xs) log:collectAllIn [] .
    ?xs list:unique ?values
} .

# predicate path 
{ 
    (?focusNode ?path) this:value ?value 
} 
<= 
{ 
    ?focusNode ?path ?value
} .

# sequence path
{
    (?focusNode (?path)) this:value ?value 
}
<=
{
    (?focusNode ?path) this:value ?value
} .

{
    (?focusNode ?path) this:value ?value 
}
<=
{
    ?path list:firstRest (?first ?rest) .
    (?focusNode ?first) this:value ?v .
    (?v ?rest) this:value ?value
} .
@prefix this: <http://eye-shacl#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

this: this:report [] .

{
    this: this:report ?report .
    [] log:notIncludes { ?report sh:conforms [] } .
}
=>
{
    ?report a sh:ValidationReport .
    ?report sh:conforms true .
} .

{
    this: this:report ?report .
    ?report sh:conforms true ; sh:result [] .
    { ?report sh:conforms true } log:becomes { ?report sh:conforms false }.
}
=>
{
 
} .

{
    ?result sh:sourceShape ?shape .
    ?shape sh:severity ?severity .
}
=> 
{
    ?result sh:resultSeverity ?severity
} .

{
   ?result sh:sourceShape ?shape .
   [] log:notIncludes { ?shape sh:severity [] } .
}
=> 
{
   ?result sh:resultSeverity sh:Violation
} .@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix this: <http://eye-shacl#> .

{ [] sh:shapesGraph ?shapesGraph . <compile.n3> log:semantics ?semantics } => ?semantics .


{
    [] sh:shapesGraph [ log:semantics [ log:includes { ?s ?p ?o } ] ] .
    ?s this:skolem ?skolemS .
    ?o this:skolem ?skolemO .
}
=>
{
    ?skolemS ?p ?skolemO .
} .



{
    ?x this:skolem ?x .
}
<=
{
    ?x log:rawType ?rawType .
    (log:UnlabeledBlankNode log:LabeledBlankNode) list:notMember ?rawType .
} .

{
    ?x this:skolem ?skolem .
}
<=
{
    ?x log:rawType ?rawType .
    (log:UnlabeledBlankNode log:LabeledBlankNode) list:member ?rawType .
    ?x log:skolem ?skolem .
} .

@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix this: <http://eye-shacl#> .
@prefix pred: <http://www.w3.org/2007/rif-builtin-predicate#>.
@prefix sh: <http://www.w3.org/ns/shacl#>.

{
    ?value this:node ?node .
}
<=
{
    [] log:notIncludes { ?value this:violates ?node }
} .

# https://www.w3.org/TR/shacl/#core-components-logical
{
    ?value this:and ?and .
}
<=
{
    (?x { ?x list:in ?and . ?value this:violates ?x } ()) log:collectAllIn [] .
} .

{
    ?value this:or ?or .
}
<=
{
    (?x { ?x list:in ?or . ?value this:violates ?x } ?xs) log:collectAllIn [] .
    ?xs list:length ?violations .
    ?or list:length [ math:greaterThan ?violations ] .
} .

{
    ?value this:not ?not .
}
<=
{
    ?value this:violates ?not .
} .

{
    ?value this:xone ?xone .
}
<=
{
    (?x { ?x list:in ?xone . ?value this:violates ?x } ?failed) log:collectAllIn [] .
    (?x { ?x list:in ?xone . ?failed list:notMember ?x } (?valid)) log:collectAllIn [] .
} .



# https://www.w3.org/TR/shacl/#core-components-range

{ ?value this:minExclusive ?minExclusive } <= { ?minExclusive a this:Number . ?value a this:Number ; math:greaterThan ?minExclusive }.
{ ?value this:minInclusive ?minInclusive } <= { ?minInclusive a this:Number . ?value a this:Number ; math:notLessThan ?minInclusive }.
{ ?value this:maxExclusive ?maxExclusive } <= { ?maxExclusive a this:Number . ?value a this:Number ; math:lessThan ?maxExclusive }.
{ ?value this:maxInclusive ?maxInclusive } <= { ?maxInclusive a this:Number . ?value a this:Number ; math:notGreaterThan ?maxInclusive }.

{ ?value this:minExclusive ?minExclusive } <= { ?minExclusive this:datatype xsd:dateTime . (?value ?minExclusive) pred:dateTime-greater-than true }.
{ ?value this:minInclusive ?minInclusive } <= { ?minInclusive this:datatype xsd:dateTime . (?value ?minInclusive) pred:dateTime-greater-than-or-equal true }.
{ ?value this:maxExclusive ?maxExclusive } <= { ?maxExclusive this:datatype xsd:dateTime . (?value ?maxExclusive) pred:dateTime-less-than true }.
{ ?value this:maxInclusive ?maxInclusive } <= { ?maxInclusive this:datatype xsd:dateTime . (?value ?maxInclusive) pred:dateTime-less-than-or-equal true }.

{ ?value this:minExclusive ?minExclusive } <= { 
    ?minExclusive this:datatype ?datatype . 
    ?datatype log:notEqualTo xsd:integer, xsd:decimal, xsd:double, xsd:float, xsd:dateTime .
    ?value this:datatype ?datatype ; string:greaterThan ?minExclusive 
} .
{ ?value this:minInclusive ?minInclusive } <= { 
    ?minInclusive this:datatype ?datatype . 
    ?datatype log:notEqualTo xsd:integer, xsd:decimal, xsd:double, xsd:float, xsd:dateTime . 
    ?value this:datatype ?datatype ; string:notLessThan ?minInclusive 
} .
{ ?value this:maxExclusive ?maxExclusive } <= { 
    ?maxExclusive this:datatype ?datatype . 
    ?datatype log:notEqualTo xsd:integer, xsd:decimal, xsd:double, xsd:float, xsd:dateTime . 
    ?value this:datatype ?datatype ; string:lessThan ?maxExclusive 
} .
{ ?value this:maxInclusive ?maxInclusive } <= { 
    ?maxInclusive this:datatype ?datatype . 
    ?datatype log:notEqualTo xsd:integer, xsd:decimal, xsd:double, xsd:float, xsd:dateTime . 
    ?value this:datatype ?datatype ; string:notGreaterThan ?maxInclusive 
} .


{ ?value a this:Number } <= { ?value this:datatype [ list:in (xsd:integer xsd:decimal xsd:double xsd:float) ] }.

{ ?value this:minLength ?minLength } <= { (?text []) log:dtlit ?value . ?text string:length [math:notLessThan ?minLength] }.
{ ?value this:minLength ?minLength } <= { ?value log:rawType log:Other ; log:uri ?text . ?text string:length [math:notLessThan ?minLength] }.

{ ?value this:maxLength ?maxLength } <= { (?text []) log:dtlit ?value . ?text string:length [math:notGreaterThan ?maxLength] }.
{ ?value this:maxLength ?maxLength } <= { ?value log:rawType log:Other ; log:uri ?text . ?text string:length [math:notGreaterThan ?maxLength] }.

{ ?value this:pattern ?pattern } <= { (?text []) log:dtlit ?value . ?text string:matches ?pattern }. # flags?

{ ?value this:languageIn ?languageIn } <= { 
    ( [] ?lang ) log:langlit ?value .
    ?lang string:startsWith [ list:in ?languageIn ] .
}.


# https://www.w3.org/TR/shacl/#core-components-value-type

{ ?value this:class ?class } <= { ?value a ?class } .
{ ?value this:class ?class } <= { ?subclass rdfs:subClassOf ?class . ?value this:class ?subclass } .


{ ?value this:nodeKind sh:IRI } <= { ?value log:rawType log:Other . ?value log:uri [] }. 
{ ?value this:nodeKind sh:Literal } <= { ?value log:rawType log:Literal }. 
{ ?value this:nodeKind sh:BlankNode } <= { ?value log:rawType log:LabeledBlankNode }. 
{ ?value this:nodeKind sh:BlankNode } <= { ?value log:rawType log:UnlabeledBlankNode }.
{ ?value this:nodeKind sh:BlankNode } <= { ?value log:rawType log:SkolemIRI }.
{ ?value this:nodeKind sh:BlankNodeOrIRI } <= { ?value this:nodeKind sh:BlankNode }. 
{ ?value this:nodeKind sh:BlankNodeOrIRI } <= { ?value this:nodeKind sh:IRI }. 
{ ?value this:nodeKind sh:IRIOrLiteral } <= { ?value this:nodeKind sh:IRI }. 
{ ?value this:nodeKind sh:IRIOrLiteral } <= { ?value this:nodeKind sh:Literal }. 
{ ?value this:nodeKind sh:BlankNodeOrLiteral } <= { ?value this:nodeKind sh:BlankNode }. 
{ ?value this:nodeKind sh:BlankNodeOrLiteral } <= { ?value this:nodeKind sh:Literal }. 

# should also check that is not ill-typed
{ ?value this:datatype ?datatype } <= { ([] ?datatype) log:dtlit ?value }.


{
    (?node ?path) this:hasDuplicateLanguage ?lang .
}
<=
{
    (?node ?path) this:value ?x, ?y .
    ?x log:notEqualTo ?y .
    ([] ?lang) log:langlit ?x .
    ([] ?lang) log:langlit ?y .
} .

{
    (?thisValues ?otherValues) this:notInBoth ?value .
}
<=
{
    (?thisValues ?otherValues) list:append ?union .
    (?x { ?x list:in ?thisValues , ?otherValues } ?intersection) log:collectAllIn [] .    
    ?union list:member ?value .
    ?intersection list:notMember ?value .
} .