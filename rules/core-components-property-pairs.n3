# https://www.w3.org/TR/shacl/#core-components-property-pairs

@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

# EqualsConstraintComponent
{ 
    ?shape sh:equals ?otherPredicate ;
        sh:path ?path ;
        this:focusNode ?focusNode .
    (?focusNode ?path) this:values ?thisValues .
    (?focusNode ?otherPredicate) this:values ?otherValues .
    ?thisValues list:setNotEqualTo ?otherValues .
} 
=> 
{
    [
        a sh:ValidationResult ;
        sh:sourceConstraintComponent sh:EqualsConstraintComponent ;
		sh:sourceShape ?shape ;
		sh:focusNode ?focusNode ;
    ]
}.

{ 
    ?shape sh:equals ?otherPredicate ;
        a sh:NodeShape ;
        this:focusNode ?focusNode .
    (?focusNode ?otherPredicate) this:values ?otherValues .
    [] log:notIncludes { ?focusNode list:in ?otherValues} .
} 
=> 
{
    [
        a sh:ValidationResult ;
        sh:sourceConstraintComponent sh:EqualsConstraintComponent ;
		sh:sourceShape ?shape ;
		sh:focusNode ?focusNode ;
        sh:value ?focusNode ;
    ]
}.

{ 
    ?shape sh:equals ?otherPredicate ;
        a sh:NodeShape ;
        this:focusNode ?focusNode .
    (?focusNode ?otherPredicate) this:value ?otherValue .
    ?otherValue log:notEqualTo ?focusNode .
} 
=> 
{
    [
        a sh:ValidationResult ;
        sh:sourceConstraintComponent sh:EqualsConstraintComponent ;
		sh:sourceShape ?shape ;
		sh:focusNode ?focusNode ;
        sh:value ?otherValue ;
    ]
}.

{
    ?node this:violates ?constraint .
}
<=
{
    ?constraint sh:equals ?otherPredicate .
    ?constraint this:shape ?shape .
    ?shape sh:path ?path .
    (?node ?path) this:values ?thisValues .
    (?node ?otherPredicate) this:values ?otherValues .
    ?thisValues list:setNotEqualTo ?otherValues .
} .

{
    ?node this:violates ?constraint .
}
<=
{
    ?constraint sh:equals ?otherPredicate .
    ?constraint this:shape ?shape .
    ?shape a sh:NodeShape .
    (?node ?otherPredicate) this:values ?otherValues .
    [] log:notIncludes { ?node list:in ?otherValues} .
} .

# DisjointConstraintComponent
{ 
    ?shape sh:disjoint ?otherPredicate ;
        sh:path ?path ;
        this:focusNode ?focusNode .
    (?focusNode ?path) this:value ?value .
    ?focusNode ?otherPredicate ?value .
} 
=> 
{
    [
        a sh:ValidationResult ;
        sh:sourceConstraintComponent sh:DisjointConstraintComponent ;
		sh:sourceShape ?shape ;
		sh:focusNode ?focusNode ;
        sh:value ?value ;
    ]
}.

{ 
    ?shape sh:disjoint ?otherPredicate ;
        a sh:NodeShape ;
        this:focusNode ?focusNode .
    (?focusNode ?otherPredicate) this:value ?focusNode .
} 
=> 
{
    [
        a sh:ValidationResult ;
        sh:sourceConstraintComponent sh:DisjointConstraintComponent ;
		sh:sourceShape ?shape ;
		sh:focusNode ?focusNode ;
        sh:value ?focusNode ;
    ]
}.

{
    ?node this:violates ?constraint .
}
<=
{
    ?constraint sh:disjoint ?otherPredicate .
    ?constraint this:shape ?shape .
    ?shape sh:path ?path .
    (?node ?path) this:value ?value .
    ?node ?otherPredicate ?value 
} .

{
    ?node this:violates ?constraint .
}
<=
{
    ?constraint sh:disjoint ?otherPredicate .
    ?constraint this:shape ?shape .
    ?shape a sh:NodeShape .
    (?node ?otherPredicate) this:value ?node .
} .

# LessThanConstraintComponent
{ 
    ?shape sh:lessThan ?otherPredicate ;
        sh:path ?path ;
        this:focusNode ?focusNode .
    (?focusNode ?path) this:value ?value .
    (?focusNode ?otherPredicate) this:value ?otherValue .
    [] log:notIncludes { ?value this:maxExclusive ?otherValue } .
} 
=> 
{
    [
        a sh:ValidationResult ;
        sh:sourceConstraintComponent sh:LessThanConstraintComponent ;
		sh:sourceShape ?shape ;
		sh:focusNode ?focusNode ;
        sh:value ?value ;
    ]
}.

{
    ?node this:violates ?constraint .
}
<=
{
    ?constraint sh:lessThan ?otherPredicate .
    ?constraint this:shape ?shape .
    ?shape sh:path ?path .
    (?node ?path) this:value ?value .
    (?node ?otherPredicate) this:value ?otherValue .
    [] log:notIncludes { ?value this:maxExclusive ?otherValue } .
} .

# LessThanOrEqualsConstraintComponent
{ 
    ?shape sh:lessThanOrEquals ?otherPredicate ;
        sh:path ?path ;
        this:focusNode ?focusNode .
    (?focusNode ?path) this:value ?value .
    (?focusNode ?otherPredicate) this:value ?otherValue .
    [] log:notIncludes { ?value this:maxInclusive ?otherValue } .
} 
=> 
{
    [
        a sh:ValidationResult ;
        sh:sourceConstraintComponent sh:LessThanOrEqualsConstraintComponent ;
		sh:sourceShape ?shape ;
		sh:focusNode ?focusNode ;
        sh:value ?value ;
    ]
}.

{
    ?node this:violates ?constraint .
}
<=
{
    ?constraint sh:lessThan ?otherPredicate .
    ?constraint this:shape ?shape .
    ?shape sh:path ?path .
    (?node ?path) this:value ?value .
    (?node ?otherPredicate) this:value ?otherValue .
    [] log:notIncludes { ?value this:maxInclusive ?otherValue } .
} .