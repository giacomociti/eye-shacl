# https://www.w3.org/TR/shacl/#core-components-count

@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

# MinCountConstraintComponent
{
    ?shape sh:minCount ?minCount ; sh:path ?path .
    [] log:notIncludes { ?shape sh:deactivated true } .
}
=>
{
    {
        ?shape this:focusNode ?node .
        (?node ?path) this:values ?values .
        ?values list:length ?length .
        ?length math:lessThan ?minCount .
        this: this:report ?report .
        ("at least %s values expected, but found %s" ?minCount ?length) string:format ?message .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:MinCountConstraintComponent;
            sh:sourceShape ?shape ;
            sh:focusNode ?node ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
} .

{
    ?shape sh:minCount ?minCount ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .
    }
    <=
    {
        (?node ?path) this:values ?values .
        ?values list:length [ math:lessThan ?minCount ].
    } .
} .



# MaxCountConstraintComponent
{
    ?shape sh:maxCount ?maxCount ; sh:path ?path .
    [] log:notIncludes { ?shape sh:deactivated true } .
}
=>
{
    {
        ?shape this:focusNode ?node .
        (?node ?path) this:values ?values .
        ?values list:length ?length .
        ?length math:greaterThan ?maxCount .
        this: this:report ?report .
        ("at most %s values expected, but found %s" ?maxCount ?length) string:format ?message .
    }
    =>
    {
        ?report sh:result [
            a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:MaxCountConstraintComponent;
            sh:sourceShape ?shape ;
            sh:focusNode ?node ;
            sh:resultPath ?path ;
            this:message ?message ;
        ] .
    } .
} .

{
    ?shape sh:maxCount ?maxCount ; sh:path ?path .
}
=>
{
    {
        ?node this:violates ?shape .        
    }
    <=
    {
       (?node ?path) this:values ?values .
        ?values list:length [ math:greaterThan ?maxCount ].
    } .
} .

