@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix this: <http://eye-shacl#> .

sh:node this:validator this:node ; this:messageFormat "value should satisfy shape %s".
sh:and this:validator this:and ; this:messageFormat "value should satisfy all of the following shapes: %s".
sh:or this:validator this:or ; this:messageFormat "value should satisfy at least one of the following shapes: %s".
sh:not this:validator this:not ; this:messageFormat "value should not satisfy the following shape: %s".
sh:xone this:validator this:xone ; this:messageFormat "value should satisfy exactly one of the following shapes: %s".
sh:in this:validator list:in ; this:messageFormat "value should be one of: %s".
sh:class this:validator this:class ; this:messageFormat "value should be instance of %s".
sh:nodeKind this:validator this:nodeKind ; this:messageFormat "value should have node kind %s".
sh:datatype this:validator this:datatype ; this:messageFormat "value should have datatype %s".
sh:minExclusive this:validator this:minExclusive ; this:messageFormat "value should be greater than %s".
sh:minInclusive this:validator this:minInclusive ; this:messageFormat "value should be greater than or equal to %s".
sh:maxExclusive this:validator this:maxExclusive ; this:messageFormat "value should be less than %s".
sh:maxInclusive this:validator this:maxInclusive ; this:messageFormat "value should be less than or equal to %s".
sh:minLength this:validator this:minLength ; this:messageFormat "value should have at least %s characters".
sh:maxLength this:validator this:maxLength ; this:messageFormat "value should have at most %s characters".
sh:pattern this:validator this:pattern ; this:messageFormat "value should match pattern %s".
sh:languageIn this:validator this:languageIn ; this:messageFormat "value should have one of the language tags: %s".


{
    ?param this:constraint [] .
    ?shape ?param [] .
}
=> 
{
    ?shape a sh:Shape .
} .

# shapes without path are node shapes
{
    ?shape a sh:Shape .
    [] log:notIncludes { ?shape sh:path [] } .
}
=>
{
    ?shape a sh:NodeShape .
} .



# node shapes with validator
{
   ?param this:constraint ?constraint ; this:validator ?validator ; this:messageFormat ?messageFormat .
   ?shape a sh:NodeShape ; ?param ?paramValue .
   [] log:notIncludes { ?shape sh:deactivated true } .
   ?paramValue log:localN3String ?paramValueString .
   (?messageFormat ?paramValueString) string:format ?message .
}
=> 
{
   {
       ?shape this:focusNode ?node .
       [] log:notIncludes { ?node ?validator ?paramValue } .
       this: this:report ?report .
   }
   => 
   {
       ?report sh:result [
           a sh:ValidationResult ;
           sh:sourceConstraintComponent ?constraint ;
           sh:sourceShape ?shape ;
           sh:focusNode ?node ;
           sh:value ?node ;
           this:message ?message ;
       ] .
   } .
} .

{
   ?param this:constraint ?constraint ; this:validator ?validator .
   ?shape a sh:NodeShape ; ?param ?paramValue .
   [] log:notIncludes { ?shape sh:deactivated true } .
}
=> 
{
   {
       ?x this:violates ?shape 
   }
   <= 
   {
       [] log:notIncludes { ?x ?validator ?paramValue }
   }
} .

# property shapes with validator
{
   ?shape sh:path ?path ; ?param ?paramValue .
   ?param this:constraint ?constraint ; this:validator ?validator ; this:messageFormat ?messageFormat .
   [] log:notIncludes { ?shape sh:deactivated true } .
   ?paramValue log:localN3String ?paramValueString .
   (?messageFormat ?paramValueString) string:format ?message .
}
=> 
{
   {
       ?shape this:focusNode ?node .
       ( ?node ?path ) this:value ?value .
       [] log:notIncludes { ?value ?validator ?paramValue } .
       this: this:report ?report .
   }
   => 
   {
       ?report sh:result [
           a sh:ValidationResult ;
           sh:sourceConstraintComponent ?constraint ;
           sh:sourceShape ?shape ;
           sh:focusNode ?node ;
           sh:resultPath ?path ;
           sh:value ?value ;
           this:message ?message ;
       ] .
   } .
} .

{
   ?shape sh:path ?path ; ?param ?paramValue .
   ?param this:constraint ?constraint ; this:validator ?validator .
   [] log:notIncludes { ?shape sh:deactivated true } .
}
=> 
{
   {
       ?x this:violates ?shape .
   }
   <= 
   {
       ( ?x ?path ) this:value ?value .
       [] log:notIncludes { ?value ?validator ?paramValue } .
   } .
} .

{
   ?shape sh:message ?message .
}
=> 
{
   { ?result sh:sourceShape ?shape } => { ?result sh:resultMessage ?message }
} .

{
   ?shape a sh:Shape .
   [] log:notIncludes { ?shape sh:message [] } .
}
=> 
{
   { ?result sh:sourceShape ?shape ; this:message ?message } => { ?result sh:resultMessage ?message }
} .

{
   ?shape sh:severity ?severity .
}
=> 
{
   { ?result sh:sourceShape ?shape } => { ?result sh:resultSeverity ?severity }
} .

{
   ?shape a sh:Shape .
   [] log:notIncludes { ?shape sh:severity [] } .
}
=> 
{
   { ?result sh:sourceShape ?shape } => { ?result sh:resultSeverity sh:Violation }
} .