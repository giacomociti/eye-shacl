# https://www.w3.org/TR/shacl/#core-components-shape
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix this: <http://eye-shacl#> .

# property
{
    ?node this:violates ?constraint
}
<=
{
    ?constraint sh:property ?innerShape .
    ?node this:violateShape ?innerShape .
    
} .

{ 
    ?shape sh:property ?property .
    ?shape this:focusNode ?focusNode .
} 
=>
{
    ?property this:focusNode ?focusNode .
} .


# node
{
    ?node this:violates ?constraint
}
<=
{
    ?constraint sh:node ?innerShape .
    ?node this:violateShape ?innerShape .
    
} .

{ 
    ?shape a sh:NodeShape .
    ?shape sh:node ?node .
    ?shape this:focusNode ?focusNode .
} 
=>
{
    ?node this:focusNode ?focusNode .

    {
        ?shape sh:node ?node .
        ?result a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:NodeConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?value .
        ?detail a sh:ValidationResult ;
            sh:sourceShape ?node ;
            sh:focusNode ?focusNode ;
            sh:value ?value .   
    }
    =>
    {
        ?result sh:detail ?detail .
    } .
} .

{ 
    ?shape a sh:PropertyShape .
    ?shape sh:path ?path .
    ?shape sh:node ?node .
    ?shape this:focusNode ?focusNode .
    (?focusNode ?path) this:value ?value .
} 
=>
{
    ?node this:focusNode ?value .

    {
        ?shape sh:node ?node .
        ?result a sh:ValidationResult ;
            sh:sourceConstraintComponent sh:NodeConstraintComponent ;
            sh:sourceShape ?shape ;
            sh:focusNode ?focusNode ;
            sh:value ?value .
        ?detail a sh:ValidationResult ;
            sh:sourceShape ?node ;
            sh:focusNode ?value ;
            sh:value ?value .
    }
    =>
    {
        ?result sh:detail ?detail .
    } .
} .



# # sh:qualifiedValueShape, sh:qualifiedMinCount, sh:qualifiedMaxCount