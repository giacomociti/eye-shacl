@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix ex: <http:/example.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sht: <http://www.w3.org/ns/shacl-test#> .
@prefix this: <http://eye-shacl#> .

ex:shape1
  sh:targetNode ex:valid, ex:invalid ;
  sh:property [
    sh:path ex:knows ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ].

# custom entailment rules
[] sh:entailment [ rdfs:seeAlso <test25.n3> ]  . 

ex:invalid ex:knows ex:valid .
ex:foo ex:knows ex:invalid .

<>
  rdf:type mf:Manifest ;
  mf:entries (
      <test25>
    ) ;
.
<test25>
  rdf:type sht:Validate ;
  rdfs:label "Test 25" ;
  mf:action [
      sht:dataGraph <> ;
      sht:shapesGraph <> ;
    ] ;
  mf:result [
      rdf:type sh:ValidationReport ;
      sh:conforms "false"^^xsd:boolean ;
      sh:result [
          a sh:ValidationResult ;
          sh:resultSeverity sh:Violation ;
          sh:sourceConstraintComponent sh:MaxCountConstraintComponent ;
          sh:focusNode ex:invalid ;
          sh:resultPath ex:knows ;
          sh:sourceShape [] ;
        ] ;
    ] ;
  mf:status sht:approved ;
.
